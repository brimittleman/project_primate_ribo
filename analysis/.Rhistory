colnames(RNA.specific.data) <- colnames(RNA.expressed.data.RC)
rownames(RNA.specific.data) <- rownames(RNA.expressed.data.RC)
for (i in 1:length(RNA.expressed.data.RC[,1])){
ribo.fit<-lm(unlist(RNA.expressed.data.RC[i,]) ~ unlist(ribo.expressed.data.RC[i,]),weights = RNA.expressed.weights.RC[i,])
RNA.specific.data[i,] <- ribo.fit$residuals
}
species.label <- substring(colnames(RNA.expressed.data.RC),1,1)
design <- model.matrix(~species.label)
colnames(design)<-c("Int","Rhesus")
# fit residual RNA effect with a species fix effect model and include voom weights calculated from RNA seq data
RvC.RNA.specific.fit <- lmFit(RNA.specific.data ,design = design,weights = RNA.expressed.weights.RC)
# use eBayes to further adjust variance and compute DE test statistics
RvC.RNA.specific.fit <- eBayes(RvC.RNA.specific.fit)
RvC.translation.buffering.pval <- RvC.RNA.specific.fit$p.value[,2]
# test for post-translation (protein) buffering
# RvC
protein.expressed.data.RC<-protein.expressed.data[,c(1:5,11:15)]
ribo.expressed.data.RC<-ribo.expressed.data[,c(1:5,11:15)]
ribo.expressed.weights.RC <- ribo.expressed.weights[,c(1:5,11:15)]
# for each gene fit ribo with protein data and take residue
ribo.specific.data <- matrix(nrow = length(ribo.expressed.data.RC[,1]),ncol = 10)
colnames(ribo.specific.data) <- colnames(ribo.expressed.data.RC)
rownames(ribo.specific.data) <- rownames(ribo.expressed.data.RC)
for (i in 1:length(ribo.expressed.data.RC[,1])){
protein.fit<-lm(unlist(ribo.expressed.data.RC[i,]) ~ unlist(protein.expressed.data.RC[i,]), na.action = "na.exclude",weights = ribo.expressed.weights.RC[i,])
ribo.specific.data[i,] <- protein.fit$residuals[match(colnames(ribo.specific.data), names(protein.fit$residuals))]
}
species.label <- substring(colnames(ribo.expressed.data.RC),1,1)
design <- model.matrix(~species.label)
colnames(design)<-c("Int","Rhesus")
# fit residual ribo effect with a species fix effect model and include voom weights calculated from ribo seq data
RvC.ribo.specific.fit <- lmFit(ribo.specific.data ,design = design,weights = ribo.expressed.weights.RC)
# use eBayes to further adjust variance and compute DE test statistics
RvC.ribo.specific.fit <- eBayes(RvC.ribo.specific.fit)
RvC.protein.buffering.pval <- RvC.ribo.specific.fit$p.value[,2]
# RvH
RNA.expressed.data.RH<-RNA.expressed.data[,6:15]
ribo.expressed.data.RH<-ribo.expressed.data[,6:15]
RNA.expressed.weights.RH <- RNA.expressed.weights[,6:15]
# for each gene fit RNA with ribo data and take residue
RNA.specific.data <- matrix(nrow = length(RNA.expressed.data.RH[,1]),ncol = 10)
colnames(RNA.specific.data) <- colnames(RNA.expressed.data.RH)
rownames(RNA.specific.data) <- rownames(RNA.expressed.data.RH)
for (i in 1:length(RNA.expressed.data.RH[,1])){
ribo.fit<-lm(unlist(RNA.expressed.data.RH[i,]) ~ unlist(ribo.expressed.data.RH[i,]),weights = RNA.expressed.weights.RH[i,])
RNA.specific.data[i,] <- ribo.fit$residuals
}
species.label <- substring(colnames(RNA.expressed.data.RH),1,1)
design <- model.matrix(~species.label)
colnames(design)<-c("Int","Rhesus")
# fit residual RNA effect with a species fix effect model and include voom weights calculated from RNA seq data
RvH.RNA.specific.fit <- lmFit(RNA.specific.data ,design = design,weights = RNA.expressed.weights.RH)
# use eBayes to further adjust variance and compute DE test statistics
RvH.RNA.specific.fit <- eBayes(RvH.RNA.specific.fit)
RvH.translation.buffering.pval <- RvH.RNA.specific.fit$p.value[,2]
# test for post-translation (protein) buffering
# RvH
protein.expressed.data.RH<-protein.expressed.data[,6:15]
ribo.expressed.data.RH<-ribo.expressed.data[,6:15]
ribo.expressed.weights.RH <- ribo.expressed.weights[,6:15]
# for each gene fit ribo with protein data and take residue
ribo.specific.data <- matrix(nrow = length(ribo.expressed.data.RH[,1]),ncol = 10)
colnames(ribo.specific.data) <- colnames(ribo.expressed.data.RH)
rownames(ribo.specific.data) <- rownames(ribo.expressed.data.RH)
for (i in 1:length(ribo.expressed.data.RH[,1])){
protein.fit<-lm(unlist(ribo.expressed.data.RH[i,]) ~ unlist(protein.expressed.data.RH[i,]), na.action = "na.exclude",weights = ribo.expressed.weights.RH[i,])
ribo.specific.data[i,] <- protein.fit$residuals[match(colnames(ribo.specific.data), names(protein.fit$residuals))]
}
species.label <- substring(colnames(ribo.expressed.data.RH),1,1)
design <- model.matrix(~species.label)
colnames(design)<-c("Int","Rhesus")
# fit residual ribo effect with a species fix effect model and include voom weights calculated from ribo seq data
RvH.ribo.specific.fit <- lmFit(ribo.specific.data ,design = design,weights = ribo.expressed.weights.RH)
# use eBayes to further adjust variance and compute DE test statistics
RvH.ribo.specific.fit <- eBayes(RvH.ribo.specific.fit)
RvH.protein.buffering.pval <- RvH.ribo.specific.fit$p.value[,2]
species.label <- substring(colnames(RNA.expressed.data),1,1)
design <- model.matrix(~species.label)
colnames(design)<-c("Int","Human","Rhesus")
RNA.voom.fit <- lmFit(RNA.expressed.data,design = design,weights = RNA.expressed.weights)
RH.contrast <- makeContrasts(Rhesus-Human,levels = design)
RNA.voom.RH.fit <- contrasts.fit(RNA.voom.fit,RH.contrast)
RNA.voom.fit <- eBayes(RNA.voom.fit)
RNA.voom.RH.fit <- eBayes(RNA.voom.RH.fit)
HvC.RNA.effect<-RNA.voom.fit$coefficient[,2]
RvC.RNA.effect<-RNA.voom.fit$coefficient[,3]
RvH.RNA.effect <- RNA.voom.RH.fit$coefficient[,1]
# ribo
species.label <- substring(colnames(ribo.expressed.data),1,1)
design <- model.matrix(~species.label)
colnames(design)<-c("Int","Human","Rhesus")
ribo.voom.fit <- lmFit(ribo.expressed.data,design = design,weights = ribo.expressed.weights)
RH.contrast <- makeContrasts(Rhesus-Human,levels = design)
ribo.voom.RH.fit <- contrasts.fit(ribo.voom.fit,RH.contrast)
ribo.voom.fit <- eBayes(ribo.voom.fit)
ribo.voom.RH.fit <- eBayes(ribo.voom.RH.fit)
HvC.ribo.effect<-ribo.voom.fit$coefficient[,2]
RvC.ribo.effect<-ribo.voom.fit$coefficient[,3]
RvH.ribo.effect <- ribo.voom.RH.fit$coefficient[,1]
# protein
species.label <- substring(colnames(protein.expressed.data),1,1)
design <- model.matrix(~species.label)
colnames(design)<-c("Int","Human","Rhesus")
protein.fit <- lmFit(protein.expressed.data,design = design)
RH.contrast <- makeContrasts(Rhesus-Human,levels = design)
protein.RH.fit <- contrasts.fit(protein.fit,RH.contrast)
protein.fit <- eBayes(protein.fit)
protein.RH.fit <- eBayes(protein.RH.fit)
HvC.protein.effect<-protein.fit$coefficient[,2]
RvC.protein.effect<-protein.fit$coefficient[,3]
RvH.protein.effect <- protein.RH.fit$coefficient[,1]
library(plyr)
protein.buffering.results <- as.data.frame(expressed.gene.names)
names(protein.buffering.results)[1] <- "gene.symbol"
protein.buffering.results$HvC.pval <- HvC.protein.buffering.pval
protein.buffering.results$RvC.pval <- RvC.protein.buffering.pval
protein.buffering.results$RvH.pval <- RvH.protein.buffering.pval
# label genes with ENSGID (rownames)
protein.buffering.results$ENSG <- rownames(protein.buffering.results)
#read in protein length
read.table("../../rdas/mm4plus/uniprot.reviewd.genename.proteinlength.030515.table", sep="\t", header=T)->protein.length
names(protein.length)<-c("gene.symbol","protein.length.aa")
# compute median protein length for each gene
int.features <- function(x) {
c(protein.length.aa=median(x$protein.length.aa))
}
int.protein.length <- ddply(protein.length, c("gene.symbol"), int.features)
protein.buffering.results.length <- merge(protein.buffering.results,int.protein.length)
dN.dS.data <- read.delim(gzfile("../../rdas/mm4plus/dNdS_pairwise.txt.gz"))
names(dN.dS.data)[1] <- "ENSG"
dN.dS.data <- dN.dS.data[dN.dS.data$dS.hc != 0,]
dN.dS.data$dN.dS.hc <- dN.dS.data$dN.hc / dN.dS.data$dS.hc
dN.dS.data$dN.dS.hr <- dN.dS.data$dN.hr / dN.dS.data$dS.hr
dN.dS.data$dN.dS.cr <- dN.dS.data$dN.cr / dN.dS.data$dS.cr
protein.buffering.pval.dNdS <- merge(protein.buffering.results.length, dN.dS.data)
# HvC
cor.test(-log10(protein.buffering.pval.dNdS$HvC.pval), protein.buffering.pval.dNdS$dN.dS.hc)
cor.test(-log10(protein.buffering.pval.dNdS$HvC.pval), protein.buffering.pval.dNdS$dN.hc)
# RvC
cor.test(-log10(protein.buffering.pval.dNdS$RvC.pval), protein.buffering.pval.dNdS$dN.dS.cr)
cor.test(-log10(protein.buffering.pval.dNdS$RvC.pval), protein.buffering.pval.dNdS$dN.cr)
# RvH
cor.test(-log10(protein.buffering.pval.dNdS$RvH.pval), protein.buffering.pval.dNdS$dN.dS.hr)
cor.test(-log10(protein.buffering.pval.dNdS$RvH.pval), protein.buffering.pval.dNdS$dN.hr)
# pull test results together in a vector
# test for both positive and negative correlations
#dNdS
HvC.cor.test <- cor.test(-log10(protein.buffering.pval.dNdS$HvC.pval), protein.buffering.pval.dNdS$dN.dS.hc)
RvC.cor.test <- cor.test(-log10(protein.buffering.pval.dNdS$RvC.pval), protein.buffering.pval.dNdS$dN.dS.cr)
RvH.cor.test <- cor.test(-log10(protein.buffering.pval.dNdS$RvH.pval), protein.buffering.pval.dNdS$dN.dS.hr)
dNdS.results<- c("dNdS",HvC.cor.test$estimate,HvC.cor.test$p.value,RvC.cor.test$estimate,RvC.cor.test$p.value,RvH.cor.test$estimate,RvH.cor.test$p.value)
dNdS.results
dNdS.dir <- substring(dNdS.results,1,1)
dNdS.dir[dNdS.dir == 0] <- "+"
dNdS.results[c(2,4,6)] <- dNdS.dir[c(2,4,6)]
#dN
HvC.cor.test <- cor.test(-log10(protein.buffering.pval.dNdS$HvC.pval), protein.buffering.pval.dNdS$dN.hc)
RvC.cor.test <- cor.test(-log10(protein.buffering.pval.dNdS$RvC.pval), protein.buffering.pval.dNdS$dN.cr)
RvH.cor.test <- cor.test(-log10(protein.buffering.pval.dNdS$RvH.pval), protein.buffering.pval.dNdS$dN.hr)
dN.results<- c("dN",HvC.cor.test$estimate,HvC.cor.test$p.value,RvC.cor.test$estimate,RvC.cor.test$p.value,RvH.cor.test$estimate,RvH.cor.test$p.value)
dN.results
dN.dir <- substring(dN.results,1,1)
dN.dir[dN.dir == 0] <- "+"
dN.results[c(2,4,6)] <- dN.dir[c(2,4,6)]
#
pvalue.by.dN <- list()
for (i in 1:4){
pvalue.by.dN[[i]] <- protein.buffering.pval.dNdS$dN.hc[which(-log10(protein.buffering.pval.dNdS$HvC.pval) > i-1 & -log10(protein.buffering.pval.dNdS$HvC.pval) <i) ]
}
pvalue.by.dN[[5]] <- protein.buffering.pval.dNdS$dN.hc[which(-log10(protein.buffering.pval.dNdS$HvC.pval) > 4)]
HvC.mean.pvalue.by.dN<- unlist(lapply(pvalue.by.dN,mean))
HvC.sd.pvalue.by.dN<- unlist(lapply(pvalue.by.dN,sd))
HvC.se.pvalue.by.dN <- HvC.sd.pvalue.by.dN/sqrt(lengths(pvalue.by.dN))
plot(c(1:5),HvC.mean.pvalue.by.dN, ylim = c(0,0.04),pch = 19,ylab = "Ka", xlab = ("-log10(p-value)"), main = "buffered genes are not enriched of nonsynonymous substitutions",xaxt="n", cex = 0.5, col = rgb(0,0,0))
axis(1,at = (1:5),labels = c("0~1","1~2","2~3","3~4","4~"))
arrows(c(1:5), HvC.mean.pvalue.by.dN-HvC.se.pvalue.by.dN, c(1:5), HvC.mean.pvalue.by.dN+HvC.se.pvalue.by.dN, length=0, angle=90, code=3, lwd = 4, col = rgb(0,0,0,0.5))
#figure 3d
pdf("../../figures/Fig3d.pdf", width = 4, height = 3)
plot(c(1:5),HvC.mean.pvalue.by.dN, ylim = c(0,0.04),pch = 19,ylab = "Ka", xlab = ("-log10(p-value)"), main = "Post-translationally buffered genes are \n not enriched for nonsynonymous substitutions",xaxt="n", cex = 0.5, col = rgb(0,0,0), cex.main=0.9)
axis(1,at = (1:5),labels = c("0~1","1~2","2~3","3~4","4~"))
arrows(c(1:5), HvC.mean.pvalue.by.dN-HvC.se.pvalue.by.dN, c(1:5), HvC.mean.pvalue.by.dN+HvC.se.pvalue.by.dN, length=0, angle=90, code=3, lwd = 4, col = rgb(0,0,0,0.5))
dev.off()
load("../../tables/HCRorthoMappability.RData")
library(limma)
library(edgeR)
library(qvalue)
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
library(qvalue)
ribo.raw <- read.csv("../../tables/fileS1.csv")
rownames(ribo.raw) <- ribo.raw$X
ribo.raw <- ribo.raw[,-1]
ls()
str(orthoGene29SynFPCoverage)
head(orthoGene29SynFPCoverage)
str(orthoGeneLength)
head(orthoGeneLength)
rownames(orthoGeneLength) <- orthoGeneLength$ID
orthoGeneLength <- orthoGeneLength[,-1]
colnames(orthoGeneLength)
colnames(orthoGeneLength) <- c("C.genelength","H.genelength","R.genelength")
colnames(orthoGene29SynFPCoverage)
head(colnames(orthoGene29SynFPCoverage))
head(orthoGene29SynFPCoverage)
rownames(orthoGene29SynFPCoverage) <- orthoGene29SynFPCoverage$ID
orthoGene29SynFPCoverage<-orthoGene29SynFPCoverage[,-1]
colnames(orthoGene29SynFPCoverage)
colnames(orthoGene29SynFPCoverage) <- c("C.mappablelength", "H.mappablelength", "R.mappablelength")
colnames(orthoGene29SynFPCoverage)
ribo.length <- merge(orthoGeneLength, orthoGene29SynFPCoverage, by = "col.names" )
ribo.length <- merge(orthoGeneLength, orthoGene29SynFPCoverage, by = "colnames" )
ribo.length <- merge(orthoGeneLength, orthoGene29SynFPCoverage, by = colnames )
ribo.length <- merge(orthoGeneLength, orthoGene29SynFPCoverage, by = col.names )
?merge
ribo.length <- merge(orthoGeneLength, orthoGene29SynFPCoverage, by = "row.names" )
str(ribo.length)
ribo.data <- merge(ribo.raw,ribo.length, by = "row.names" )
head(ribo.length)
load("../../tables/HCRorthoMappability.RData")
library(limma)
library(edgeR)
library(qvalue)
ribo.raw <- read.csv("../../tables/fileS1.csv")
colnames(ribo.raw)
colnames(ribo.raw)[1]
colnames(ribo.raw)[1] <- "ID"
colnames(orthoGeneLength)
colnames(orthoGeneLength) <- c("ID","C.genelength","H.genelength","R.genelength")
colnames(orthoGene29SynFPCoverage)
colnames(orthoGene29SynFPCoverage) <- c("ID","C.mappablelength", "H.mappablelength", "R.mappablelength")
ribo.length <- merge(orthoGeneLength, orthoGene29SynFPCoverage)
str(ribo.length)
ribo.data <- merge(ribo.raw,ribo.length)
str(ribo.data)
str(ribo.data)
head(ribo.data)
head(ribo.data)
rownames(ribo.data) <- ribo.data$ID
head(ribo.data)
ribo.data <- ribo.data[,-1]
str(ribo.data)
head(ribo.data)
head(ribo.data[,1:13])
head(ribo.data[,1:13])
head(ribo.data[,1:12])
head(ribo.data[,1:12])
ribo.raw <- ribo.data[,1:12]
species.label <- substring(names(ribo.raw),1,1)
design <- model.matrix(~species.label)
design
colnames(design) <- c("Intercept","Human","Rhesus")
ribo.dge <- DGEList(counts = ribo.raw)
ribo.dge <- calcNormFactors(ribo.dge)
ribo.voom.dge <- voom(ribo.dge,design,plot=TRUE)
head(ribo.voom.dge$E)
str(ribo.voom.dge$E)
head(ribo.data)
dim(ribo.voom.dge$E)
dim(ribo.data)
head(rownames(ribo.voom.dge))
head(rownames(ribo.data))
head(which(rownames(ribo.voom.dge)==rownames(ribo.data)))
head(which(rownames(ribo.voom.dge)!=rownames(ribo.data)))
summary(which(rownames(ribo.voom.dge)!=rownames(ribo.data)))
table(which(rownames(ribo.voom.dge)!=rownames(ribo.data)))
table(which(rownames(ribo.voom.dge)==rownames(ribo.data)))
summary(which(rownames(ribo.voom.dge)==rownames(ribo.data)))
head(which(rownames(ribo.voom.dge)==rownames(ribo.data)))
head(rownames(ribo.voom.dge)==rownames(ribo.data))
table(rownames(ribo.voom.dge)==rownames(ribo.data))
table(rownames(ribo.voom.dge)!=rownames(ribo.data))
table(rownames(ribo.voom.dge$E)!=rownames(ribo.data))
table(rownames(ribo.voom.dge$E)==rownames(ribo.data))
tail(rownames(ribo.voom.dge$E))
tail(ribo.data)
tail(rownames(ribo.voom.dge$E))
tail(rownames(ribo.data))
head(ribo.voom.dge$E)
ribo.log2rpkm<-cbind(log2(1000)+ribo.voom.dge$E[,1:4]
-log2(ribo.data$C.genelength), log2(1000)+ribo.voom.dge$E[,5:8]
-log2(ribo.data$R.genelength), log2(1000)+ribo.voom.dge$E[,9:12]
-log2(ribo.data$H.genelength))
boxplot(ribo.log2rpkm)
ribo.mappable.log2rpkm<-cbind(log2(1000)+ribo.voom.dge$E[,1:4]
-log2(ribo.data$C.mappablelength), log2(1000)+ribo.voom.dge$E[,5:8]
-log2(ribo.data$R.mappablelength), log2(1000)+ribo.voom.dge$E[,9:12]
-log2(ribo.data$H.mappablelength))
boxplot(ribo.mappable.log2rpkm)
ribo.log2rpkm<-cbind(log2(1000)+ribo.voom.dge$E[,1:4]
-log2(ribo.data$C.genelength), log2(1000)+ribo.voom.dge$E[,5:8]
-log2(ribo.data$R.genelength), log2(1000)+ribo.voom.dge$E[,9:12]
-log2(ribo.data$H.genelength))
boxplot(ribo.log2rpkm)
# compute mappability adjusted log2RPKM
ribo.mappable.log2rpkm<-cbind(log2(1000)+ribo.voom.dge$E[,1:4]
-log2(ribo.data$C.mappablelength), log2(1000)+ribo.voom.dge$E[,5:8]
-log2(ribo.data$R.mappablelength), log2(1000)+ribo.voom.dge$E[,9:12]
-log2(ribo.data$H.mappablelength))
boxplot(ribo.mappable.log2rpkm)
ribo.RPKM.fit <- lmFit(ribo.log2rpkm,design = design)
HR.contrast <- makeContrasts(Human-Rhesus,levels = design)
ribo.RPKM.HR.fit <- contrasts.fit(ribo.RPKM.fit,HR.contrast)
ribo.RPKM.fit <- eBayes(ribo.RPKM.fit)
ribo.RPKM.HR.fit <- eBayes(ribo.RPKM.HR.fit)
HvC.spe.effect<-ribo.RPKM.fit$coefficient[,2]
RvC.spe.effect<-ribo.RPKM.fit$coefficient[,3]
HvR.spe.effect<-ribo.RPKM.HR.fit$coefficient[,1]
HvC.spe.pval<-ribo.RPKM.fit$p.value[,2]
RvC.spe.pval<-ribo.RPKM.fit$p.value[,3]
HvR.spe.pval<-ribo.RPKM.HR.fit$p.value[,1]
#adjust for mappability
# lm fit and DE test without voom weights but account for mappability
ribo.mappable.RPKM.fit <- lmFit(ribo.mappable.log2rpkm,design = design)
HR.contrast <- makeContrasts(Human-Rhesus,levels = design)
ribo.mappable.RPKM.HR.fit <- contrasts.fit(ribo.mappable.RPKM.fit,HR.contrast)
ribo.mappable.RPKM.fit <- eBayes(ribo.mappable.RPKM.fit)
ribo.mappable.RPKM.HR.fit <- eBayes(ribo.mappable.RPKM.HR.fit)
HvC.mappable.spe.effect<-ribo.mappable.RPKM.fit$coefficient[,2]
RvC.mappable.spe.effect<-ribo.mappable.RPKM.fit$coefficient[,3]
HvR.mappable.spe.effect<-ribo.mappable.RPKM.HR.fit$coefficient[,1]
HvC.mappable.spe.pval<-ribo.mappable.RPKM.fit$p.value[,2]
RvC.mappable.spe.pval<-ribo.mappable.RPKM.fit$p.value[,3]
HvR.mappable.spe.pval<-ribo.mappable.RPKM.HR.fit$p.value[,1]
library(ggplot2)
r.squared <- format(cor(HvC.mappable.spe.effect,HvC.spe.effect)^2,digits = 2)
F1S7a <- ggplot(mapping = aes(x=HvC.mappable.spe.effect,y=HvC.spe.effect))+geom_point(size=1, alpha=0.3)+geom_abline()+xlab("mappability adjusted")+ylab("original")+ggtitle("translational level: log2(human/chimpanzee)")+annotate(geom="text",x=6,y=-7,label=paste("r^2 =",r.squared))
F1S7a
F1S7a
r.squared <- format(cor(HvC.mappable.spe.effect,HvC.spe.effect,use = "complete.obs")^2,digits = 2)
F1S7a <- ggplot(mapping = aes(x=HvC.mappable.spe.effect,y=HvC.spe.effect))+geom_point(size=1, alpha=0.3)+geom_abline()+xlab("mappability adjusted")+ylab("original")+ggtitle("translational level: log2(human/chimpanzee)")+annotate(geom="text",x=6,y=-7,label=paste("r^2 =",r.squared))
F1S7a
F1S7a
head(HvC.spe.effect)
summary(HvC.spe.effect)
summary(HvC.mappable.spe.effect)
which(is.na(HvC.mappable.spe.effect))
str(ribo.data)
which(is.na(HvC.mappable.spe.effect))
ribo.data[6527,]
r.squared <- format(cor(-log10(HvC.mappable.spe.pval),-log10(HvC.spe.pval),use = "complete.obs")^2,digits = 2)
F1S8b <- ggplot(mapping = aes(x=-log10(HvC.mappable.spe.pval),y=-log10(HvC.spe.pval)))+geom_point(size=1, alpha=0.3)+geom_abline()+xlab("mappability adjusted")+ylab("original")+ggtitle("-log10(p-value) human vs chimpanzee")+annotate(geom="text",x=9,y=2,label=paste("r^2 =",r.squared))
F1S8b
# RvC
# slope
r.squared <- format(cor(RvC.mappable.spe.effect,RvC.spe.effect,use = "complete.obs")^2,digits = 2)
F1S8a <- ggplot(mapping = aes(x=RvC.mappable.spe.effect,y=RvC.spe.effect))+geom_point(size=1, alpha=0.3)+geom_abline()+xlab("mappability adjusted")+ylab("original")+ggtitle("translational level: log2(human/chimpanzee)")+annotate(geom="text",x=6,y=-7,label=paste("r^2 =",r.squared))
F1S8a
# ######
# #save figure F1S8a as pdf
# pdf("../../figures/Fig1S8a.pdf", width = 4, height = 4)
# F1S8a
# dev.off()
#
# ######
# p value
r.squared <- format(cor(-log10(RvC.mappable.spe.pval),-log10(RvC.spe.pval),use = "complete.obs")^2,digits = 2)
F1S8b <- ggplot(mapping = aes(x=-log10(RvC.mappable.spe.pval),y=-log10(RvC.spe.pval)))+geom_point(size=1, alpha=0.3)+geom_abline()+xlab("mappability adjusted")+ylab("original")+ggtitle("-log10(p-value) human vs chimpanzee")+annotate(geom="text",x=9,y=2,label=paste("r^2 =",r.squared))
F1S8b
# ######
# #save figure F1S8b as pdf
#
# pdf("../../figures/Fig1S8b.pdf", width = 4, height = 4)
# F1S8b
# dev.off()
#
#
# ######
# HvR
# slope
r.squared <- format(cor(HvR.mappable.spe.effect,HvR.spe.effect,use = "complete.obs")^2,digits = 2)
F1S8e <- ggplot(mapping = aes(x=HvR.mappable.spe.effect,y=HvR.spe.effect))+geom_point(size=1, alpha=0.3)+geom_abline()+xlab("mappability adjusted")+ylab("original")+ggtitle("translational level: log2(human/rhesus)")+annotate(geom="text",x=6,y=-7,label=paste("r^2 =",r.squared))
F1S8e
# ######
# #save figure F1S8e as pdf
# pdf("../../figures/Fig1S8e.pdf", width = 4, height = 4)
# F1S8e
# dev.off()
#
# ######
# p value
r.squared <- format(cor(-log10(HvR.mappable.spe.pval),-log10(HvR.spe.pval),use = "complete.obs")^2,digits = 2)
F1S8f <- ggplot(mapping = aes(x=-log10(HvR.mappable.spe.pval),y=-log10(HvR.spe.pval)))+geom_point(size=1, alpha=0.3)+geom_abline()+xlab("mappability adjusted")+ylab("original")+ggtitle("-log10(p-value) human vs rhesus")+annotate(geom="text",x=9,y=2,label=paste("r^2 =",r.squared))
F1S8f
# ######
# #save figure F1S8f as pdf
#
# pdf("../../figures/Fig1S8f.pdf", width = 4, height = 4)
# F1S8f
# dev.off()
#
#
# ######
ls()
str(orthoGeneProportionMappable)
head(orthoGeneProportionMappable)
cor(orthoGeneProportionMappable$C.synFP_29,orthoGeneProportionMappable$H.synFP_29)
diff.mappability <- apply(orthoGeneProportionMappable, 1, sum) < 3
head(diff.mappability)
head(diff.mappability[diff.mappability,])
head(orthoGeneProportionMappable[diff.mappability,])
cor(orthoGeneProportionMappable$C.synFP_29[diff.mappability],orthoGeneProportionMappable$H.synFP_29[diff.mappability])
head(orthoGeneProportionMappable[diff.mappability,])
dim(orthoGeneProportionMappable[diff.mappability,])
dim(orthoGeneProportionMappable)
6507/28644
hist(orthoGeneProportionMappable)
hist(orthoGeneProportionMappable$C.synFP_29)
hist(orthoGeneProportionMappable$H.synFP_29)
hist(orthoGeneProportionMappable$R.synFP_29)
hist(orthoGeneProportionMappable$R.synFP_29, xlim = c(0.5,1)
)
hist(orthoGeneProportionMappable$R.synFP_29, xlim = c(0.5,1),breaks = 100)
hist(orthoGeneProportionMappable$R.synFP_29, xlim = c(0.7,1),breaks = 100)
head(HvR.mappable.spe.pval)
head(orthoGeneProportionMappable)
head(HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(HvR.mappable.spe.pval, orthoGeneProportionMappable, by = "row.names")
head(ribo.DE.mappability)
ribo.DE.mappability <- merge(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval, orthoGeneProportionMappable, by = "row.names")
rm(ribo.DE.mappability)
ribo.DE.mappability <- merge(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval, orthoGeneProportionMappable, by = "row.names")
dim(HvC.mappable.spe.effect)
head(HvC.mappable.spe.effect)
str(HvC.mappable.spe.effect)
str(orthoGeneProportionMappable)
head(orthoGeneProportionMappable)
head(HvR.mappable.spe.pval)
head(cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval))
ribo.DE.mappable.results <- cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.mappable.results, orthoGeneProportionMappable, by = "row.names")
head(ribo.DE.mappability)
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
head(ribo.DE.mappability)
r2 <- paste("r^2 == ", round(cor(-log10(ribo.DE.mappability$HvC.mappable.spe.pval), abs(ribo.DE.mappability$HvC.mappability))^2, 4))
FigX <- ggplot(mapping = aes(x=-log10(ribo.DE.mappability$HvC.mappable.spe.pval),y=abs(100*ribo.DE.mappability$HvC.mappability)))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log10(p-value)")+ylab("absolute difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression test")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=10, y=50,parse=TRUE)
FigX
r2
r2 <- paste("r^2 == ", round(cor(-log10(ribo.DE.mappability$HvC.mappable.spe.pval), abs(ribo.DE.mappability$HvC.mappability), use = "complete.obs")^2, 4))
FigX <- ggplot(mapping = aes(x=-log10(ribo.DE.mappability$HvC.mappable.spe.pval),y=abs(100*ribo.DE.mappability$HvC.mappability)))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log10(p-value)")+ylab("absolute difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression test")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=10, y=50,parse=TRUE)
FigX
FigX
FigX <- ggplot(mapping = aes(x=-log10(ribo.DE.mappability$HvC.mappable.spe.pval),y=abs(100*ribo.DE.mappability$HvC.mappability)))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log10(p-value)")+ylab("absolute difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression test")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
FigX
r2 <- paste("r^2 == ", round(cor(ribo.DE.mappability$HvC.mappable.spe.effect, ribo.DE.mappability$HvC.mappability, use = "complete.obs")^2, 4))
FigX <- ggplot(mapping = aes(x=ribo.DE.mappability$HvC.mappable.spe.effect,y=100*ribo.DE.mappability$HvC.mappability))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
FigX
head(ribo.DE.mappability$HvC.mappability == 0)
head(ribo.DE.mappability$HvC.mappability != 0)
ggplot(mapping = aes(x=ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0],y=100*ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0]))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
length(ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0])
length(ribo.DE.mappability$HvC.mappability)
r2 <- paste("r^2 == ", round(cor(ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")^2, 4))
r2 <- paste("r^2 == ", round(cor(ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")^2, 4))
FigX <- ggplot(mapping = aes(x=ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0],y=100*ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0]))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
FigX
cor.test(ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")
ribo.DE.results <- cbind(HvC.spe.effect,RvC.spe.effect,HvR.spe.effect,HvC.spe.pval,RvC.spe.pval,HvR.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
r2 <- paste("r^2 == ", round(cor(ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")^2, 4))
FigX <- ggplot(mapping = aes(x=ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0],y=100*ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0]))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
FigX
r2
ribo.DE.mappable.results <- cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.mappable.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
r2 <- paste("r^2 == ", round(cor(ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")^2, 4))
r2
ggplot(mapping = aes(x=ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0],y=100*ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0]))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
ribo.DE.results <- cbind(HvC.spe.effect,RvC.spe.effect,HvR.spe.effect,HvC.spe.pval,RvC.spe.pval,HvR.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
r2 <- paste("r^2 == ", round(cor(ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")^2, 4))
ribo.DE.mappable.results <- cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.mappable.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
ggplot(mapping = aes(x=-log10(ribo.DE.mappability$HvC.mappable.spe.pval),y=abs(100*ribo.DE.mappability$HvC.mappability)))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log10(p-value)")+ylab("absolute difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression test")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
ggplot(mapping = aes(x=-log10(ribo.DE.mappability$HvC.mappable.spe.pval),y=abs(100*ribo.DE.mappability$HvC.mappability)))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log10(p-value)")+ylab("absolute difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression test")+theme(plot.title = element_text(size = 12)) + annotate("text",label=r2, x=8, y=30,parse=TRUE)
ribo.DE.mappable.results <- cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.mappable.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
ggplot(mapping = aes(x=ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0],y=100*ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0]))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12))
ribo.DE.results <- cbind(HvC.spe.effect,RvC.spe.effect,HvR.spe.effect,HvC.spe.pval,RvC.spe.pval,HvR.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
ggplot(mapping = aes(x=ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0],y=100*ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0]))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12))
ribo.DE.mappable.results <- cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.mappable.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
ggplot(mapping = aes(x=ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0],y=100*ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0]))+geom_point(size=0.75, alpha=0.3, col="black")+ xlab("-log2FC")+ylab("difference in mappability (%)")+theme_bw()+ggtitle("HvC: impact of mappability adjustment on \n differential expression")+theme(plot.title = element_text(size = 12))
cor.test(ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")
ribo.DE.mappable.results <- cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.mappable.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
cor.test(ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")
ribo.DE.results <- cbind(HvC.spe.effect,RvC.spe.effect,HvR.spe.effect,HvC.spe.pval,RvC.spe.pval,HvR.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.results, orthoGeneProportionMappable, by = "row.names")
cor.test(ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs"
)
cor.test(ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")
ribo.DE.results <- cbind(HvC.spe.effect,RvC.spe.effect,HvR.spe.effect,HvC.spe.pval,RvC.spe.pval,HvR.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
cor.test(ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")
ribo.DE.mappable.results <- cbind(HvC.mappable.spe.effect,RvC.mappable.spe.effect,HvR.mappable.spe.effect,HvC.mappable.spe.pval,RvC.mappable.spe.pval,HvR.mappable.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.mappable.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
cor.test(ribo.DE.mappability$HvC.mappable.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")
ribo.DE.results <- cbind(HvC.spe.effect,RvC.spe.effect,HvR.spe.effect,HvC.spe.pval,RvC.spe.pval,HvR.spe.pval)
ribo.DE.mappability <- merge(ribo.DE.results, orthoGeneProportionMappable, by = "row.names")
ribo.DE.mappability$HvC.mappability <- ribo.DE.mappability$H.synFP_29 - ribo.DE.mappability$C.synFP_29
cor.test(ribo.DE.mappability$HvC.spe.effect[ribo.DE.mappability$HvC.mappability != 0], ribo.DE.mappability$HvC.mappability[ribo.DE.mappability$HvC.mappability != 0], use = "complete.obs")
